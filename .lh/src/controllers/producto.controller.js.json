{
    "sourceFile": "src/controllers/producto.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1743973570336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743976960147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,18 @@\n                 }\r\n             });\r\n         }\r\n \r\n+        // Validar longitud de la descripción\r\n+        if (descripcion.length > 65535) {\r\n+            return res.status(400).json({ \r\n+                message: 'La descripción es demasiado larga. Máximo 65535 caracteres.' \r\n+            });\r\n+        }\r\n+\r\n         const [result] = await db.execute(\r\n             'INSERT INTO Producto (nombre_producto, descripcion, precio, imagen, id_categoria) VALUES (?, ?, ?, ?, ?)',\r\n-            [nombre_producto, descripcion, precio, imagen, id_categoria]\r\n+            [nombre_producto, descripcion.trim(), precio, imagen, id_categoria]\r\n         );\r\n \r\n         res.status(201).json({ \r\n             message: 'Producto creado exitosamente', \r\n"
                },
                {
                    "date": 1743977192811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,15 @@\n                 message: 'La descripción es demasiado larga. Máximo 65535 caracteres.' \r\n             });\r\n         }\r\n \r\n+        // Limpiar y normalizar el texto\r\n+        const nombreLimpio = nombre_producto.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n+        const descripcionLimpia = descripcion.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n+\r\n         const [result] = await db.execute(\r\n             'INSERT INTO Producto (nombre_producto, descripcion, precio, imagen, id_categoria) VALUES (?, ?, ?, ?, ?)',\r\n-            [nombre_producto, descripcion.trim(), precio, imagen, id_categoria]\r\n+            [nombreLimpio, descripcionLimpia, precio, imagen, id_categoria]\r\n         );\r\n \r\n         res.status(201).json({ \r\n             message: 'Producto creado exitosamente', \r\n"
                },
                {
                    "date": 1743977208557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,11 +84,22 @@\n     try {\r\n         const { nombre_producto, descripcion, precio, id_categoria } = req.body;\r\n         const imagen = req.file ? req.file.buffer : null;\r\n \r\n+        // Validar campos requeridos\r\n+        if (!nombre_producto || !descripcion || !precio || !id_categoria) {\r\n+            return res.status(400).json({ \r\n+                message: 'Todos los campos son requeridos'\r\n+            });\r\n+        }\r\n+\r\n+        // Limpiar y normalizar el texto\r\n+        const nombreLimpio = nombre_producto.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n+        const descripcionLimpia = descripcion.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n+\r\n         const [result] = await db.execute(\r\n             'UPDATE Producto SET nombre_producto = ?, descripcion = ?, precio = ?, imagen = ?, id_categoria = ? WHERE id_producto = ?',\r\n-            [nombre_producto, descripcion, precio, imagen, id_categoria, req.params.id]\r\n+            [nombreLimpio, descripcionLimpia, precio, imagen, id_categoria, req.params.id]\r\n         );\r\n \r\n         if (result.affectedRows === 0) {\r\n             return res.status(404).json({ message: 'Producto no encontrado' });\r\n"
                },
                {
                    "date": 1743977929162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n             });\r\n         }\r\n \r\n         // Limpiar y normalizar el texto\r\n-        const nombreLimpio = nombre_producto.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n-        const descripcionLimpia = descripcion.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n+        const nombreLimpio = nombre_producto.trim();\r\n+        const descripcionLimpia = descripcion.trim();\r\n \r\n         const [result] = await db.execute(\r\n             'INSERT INTO Producto (nombre_producto, descripcion, precio, imagen, id_categoria) VALUES (?, ?, ?, ?, ?)',\r\n             [nombreLimpio, descripcionLimpia, precio, imagen, id_categoria]\r\n@@ -39,10 +39,10 @@\n             message: 'Producto creado exitosamente', \r\n             id: result.insertId,\r\n             producto: {\r\n                 id_producto: result.insertId,\r\n-                nombre_producto,\r\n-                descripcion,\r\n+                nombre_producto: nombreLimpio,\r\n+                descripcion: descripcionLimpia,\r\n                 precio,\r\n                 id_categoria\r\n             }\r\n         });\r\n"
                },
                {
                    "date": 1743977945052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,10 @@\n             });\r\n         }\r\n \r\n         // Limpiar y normalizar el texto\r\n-        const nombreLimpio = nombre_producto.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n-        const descripcionLimpia = descripcion.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n+        const nombreLimpio = nombre_producto.trim();\r\n+        const descripcionLimpia = descripcion.trim();\r\n \r\n         const [result] = await db.execute(\r\n             'UPDATE Producto SET nombre_producto = ?, descripcion = ?, precio = ?, imagen = ?, id_categoria = ? WHERE id_producto = ?',\r\n             [nombreLimpio, descripcionLimpia, precio, imagen, id_categoria, req.params.id]\r\n@@ -104,9 +104,18 @@\n         if (result.affectedRows === 0) {\r\n             return res.status(404).json({ message: 'Producto no encontrado' });\r\n         }\r\n \r\n-        res.status(200).json({ message: 'Producto actualizado exitosamente' });\r\n+        res.status(200).json({ \r\n+            message: 'Producto actualizado exitosamente',\r\n+            producto: {\r\n+                id_producto: parseInt(req.params.id),\r\n+                nombre_producto: nombreLimpio,\r\n+                descripcion: descripcionLimpia,\r\n+                precio,\r\n+                id_categoria\r\n+            }\r\n+        });\r\n     } catch (error) {\r\n         res.status(500).json({ message: 'Error al actualizar producto', error: error.message });\r\n     }\r\n };\r\n"
                },
                {
                    "date": 1743979110526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,15 +122,58 @@\n \r\n // Eliminar un producto\r\n exports.delete = async (req, res) => {\r\n     try {\r\n-        const [result] = await db.execute('DELETE FROM Producto WHERE id_producto = ?', [req.params.id]);\r\n+        // Verificar si el producto existe\r\n+        const [producto] = await db.execute(\r\n+            'SELECT * FROM Producto WHERE id_producto = ?',\r\n+            [req.params.id]\r\n+        );\r\n \r\n+        if (producto.length === 0) {\r\n+            return res.status(404).json({ message: 'Producto no encontrado' });\r\n+        }\r\n+\r\n+        // Verificar si hay registros en Stock\r\n+        const [stockRegistros] = await db.execute(\r\n+            'SELECT COUNT(*) as count FROM Stock WHERE id_producto = ?',\r\n+            [req.params.id]\r\n+        );\r\n+\r\n+        if (stockRegistros[0].count > 0) {\r\n+            return res.status(400).json({ \r\n+                message: 'No se puede eliminar el producto porque tiene registros de stock asociados. Elimine primero los registros de stock.' \r\n+            });\r\n+        }\r\n+\r\n+        // Verificar si hay registros en Detalle_Venta\r\n+        const [ventasRegistros] = await db.execute(\r\n+            'SELECT COUNT(*) as count FROM Detalle_Venta WHERE id_producto = ?',\r\n+            [req.params.id]\r\n+        );\r\n+\r\n+        if (ventasRegistros[0].count > 0) {\r\n+            return res.status(400).json({ \r\n+                message: 'No se puede eliminar el producto porque tiene ventas asociadas.' \r\n+            });\r\n+        }\r\n+\r\n+        // Si no hay registros relacionados, proceder con la eliminación\r\n+        const [result] = await db.execute(\r\n+            'DELETE FROM Producto WHERE id_producto = ?', \r\n+            [req.params.id]\r\n+        );\r\n+\r\n         if (result.affectedRows === 0) {\r\n             return res.status(404).json({ message: 'Producto no encontrado' });\r\n         }\r\n \r\n         res.status(200).json({ message: 'Producto eliminado exitosamente' });\r\n     } catch (error) {\r\n-        res.status(500).json({ message: 'Error al eliminar producto', error: error.message });\r\n+        console.error('Error al eliminar producto:', error);\r\n+        res.status(500).json({ \r\n+            message: 'Error al eliminar producto', \r\n+            error: error.message,\r\n+            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n+        });\r\n     }\r\n }; \n\\ No newline at end of file\n"
                }
            ],
            "date": 1743973570336,
            "name": "Commit-0",
            "content": "const db = require('../config/db.config');\r\n\r\n// Crear un nuevo producto\r\nexports.create = async (req, res) => {\r\n    try {\r\n        const { nombre_producto, descripcion, precio, id_categoria } = req.body;\r\n        const imagen = req.file ? req.file.buffer : null;\r\n\r\n        // Validar campos requeridos\r\n        if (!nombre_producto || !descripcion || !precio || !id_categoria) {\r\n            return res.status(400).json({ \r\n                message: 'Todos los campos son requeridos',\r\n                missing: {\r\n                    nombre_producto: !nombre_producto,\r\n                    descripcion: !descripcion,\r\n                    precio: !precio,\r\n                    id_categoria: !id_categoria\r\n                }\r\n            });\r\n        }\r\n\r\n        const [result] = await db.execute(\r\n            'INSERT INTO Producto (nombre_producto, descripcion, precio, imagen, id_categoria) VALUES (?, ?, ?, ?, ?)',\r\n            [nombre_producto, descripcion, precio, imagen, id_categoria]\r\n        );\r\n\r\n        res.status(201).json({ \r\n            message: 'Producto creado exitosamente', \r\n            id: result.insertId,\r\n            producto: {\r\n                id_producto: result.insertId,\r\n                nombre_producto,\r\n                descripcion,\r\n                precio,\r\n                id_categoria\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Error al crear producto:', error);\r\n        res.status(500).json({ \r\n            message: 'Error al crear producto', \r\n            error: error.message,\r\n            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n        });\r\n    }\r\n};\r\n\r\n// Obtener todos los productos\r\nexports.findAll = async (req, res) => {\r\n    try {\r\n        const [productos] = await db.execute('SELECT * FROM Producto');\r\n        res.status(200).json(productos);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error al obtener productos', error: error.message });\r\n    }\r\n};\r\n\r\n// Obtener un producto por ID\r\nexports.findOne = async (req, res) => {\r\n    try {\r\n        const [producto] = await db.execute('SELECT * FROM Producto WHERE id_producto = ?', [req.params.id]);\r\n        if (producto.length === 0) {\r\n            return res.status(404).json({ message: 'Producto no encontrado' });\r\n        }\r\n        res.status(200).json(producto[0]);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error al obtener producto', error: error.message });\r\n    }\r\n};\r\n\r\n// Actualizar un producto\r\nexports.update = async (req, res) => {\r\n    try {\r\n        const { nombre_producto, descripcion, precio, id_categoria } = req.body;\r\n        const imagen = req.file ? req.file.buffer : null;\r\n\r\n        const [result] = await db.execute(\r\n            'UPDATE Producto SET nombre_producto = ?, descripcion = ?, precio = ?, imagen = ?, id_categoria = ? WHERE id_producto = ?',\r\n            [nombre_producto, descripcion, precio, imagen, id_categoria, req.params.id]\r\n        );\r\n\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Producto no encontrado' });\r\n        }\r\n\r\n        res.status(200).json({ message: 'Producto actualizado exitosamente' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error al actualizar producto', error: error.message });\r\n    }\r\n};\r\n\r\n// Eliminar un producto\r\nexports.delete = async (req, res) => {\r\n    try {\r\n        const [result] = await db.execute('DELETE FROM Producto WHERE id_producto = ?', [req.params.id]);\r\n\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Producto no encontrado' });\r\n        }\r\n\r\n        res.status(200).json({ message: 'Producto eliminado exitosamente' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error al eliminar producto', error: error.message });\r\n    }\r\n}; "
        }
    ]
}