{
    "sourceFile": "src/controllers/categoria.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1743974315168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743976967946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,21 +9,28 @@\n         if (!nombre_categoria || nombre_categoria.trim() === '') {\r\n             return res.status(400).json({ message: 'El nombre de la categoría es requerido' });\r\n         }\r\n \r\n+        // Validar longitud del nombre\r\n+        if (nombre_categoria.length > 40) {\r\n+            return res.status(400).json({ \r\n+                message: 'El nombre de la categoría es demasiado largo. Máximo 40 caracteres.' \r\n+            });\r\n+        }\r\n+\r\n         // Verificar si la categoría ya existe\r\n         const [existing] = await db.execute(\r\n             'SELECT * FROM Categoria WHERE nombre_categoria = ?',\r\n-            [nombre_categoria]\r\n+            [nombre_categoria.trim()]\r\n         );\r\n \r\n         if (existing.length > 0) {\r\n             return res.status(400).json({ message: 'Ya existe una categoría con ese nombre' });\r\n         }\r\n \r\n         const [result] = await db.execute(\r\n             'INSERT INTO Categoria (nombre_categoria) VALUES (?)',\r\n-            [nombre_categoria]\r\n+            [nombre_categoria.trim()]\r\n         );\r\n \r\n         res.status(201).json({ \r\n             message: 'Categoría creada exitosamente', \r\n"
                },
                {
                    "date": 1743976978318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,15 @@\n         if (!nombre_categoria || nombre_categoria.trim() === '') {\r\n             return res.status(400).json({ message: 'El nombre de la categoría es requerido' });\r\n         }\r\n \r\n+        // Validar longitud del nombre\r\n+        if (nombre_categoria.length > 40) {\r\n+            return res.status(400).json({ \r\n+                message: 'El nombre de la categoría es demasiado largo. Máximo 40 caracteres.' \r\n+            });\r\n+        }\r\n+\r\n         // Verificar si la categoría existe\r\n         const [existing] = await db.execute(\r\n             'SELECT * FROM Categoria WHERE id_categoria = ?',\r\n             [req.params.id]\r\n@@ -108,18 +115,18 @@\n \r\n         // Verificar si ya existe otra categoría con el mismo nombre\r\n         const [duplicate] = await db.execute(\r\n             'SELECT * FROM Categoria WHERE nombre_categoria = ? AND id_categoria != ?',\r\n-            [nombre_categoria, req.params.id]\r\n+            [nombre_categoria.trim(), req.params.id]\r\n         );\r\n \r\n         if (duplicate.length > 0) {\r\n             return res.status(400).json({ message: 'Ya existe una categoría con ese nombre' });\r\n         }\r\n \r\n         await db.execute(\r\n             'UPDATE Categoria SET nombre_categoria = ? WHERE id_categoria = ?',\r\n-            [nombre_categoria, req.params.id]\r\n+            [nombre_categoria.trim(), req.params.id]\r\n         );\r\n \r\n         res.status(200).json({ \r\n             message: 'Categoría actualizada exitosamente',\r\n"
                },
                {
                    "date": 1743977223461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,21 +16,24 @@\n                 message: 'El nombre de la categoría es demasiado largo. Máximo 40 caracteres.' \r\n             });\r\n         }\r\n \r\n+        // Limpiar y normalizar el texto\r\n+        const nombreLimpio = nombre_categoria.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n+\r\n         // Verificar si la categoría ya existe\r\n         const [existing] = await db.execute(\r\n             'SELECT * FROM Categoria WHERE nombre_categoria = ?',\r\n-            [nombre_categoria.trim()]\r\n+            [nombreLimpio]\r\n         );\r\n \r\n         if (existing.length > 0) {\r\n             return res.status(400).json({ message: 'Ya existe una categoría con ese nombre' });\r\n         }\r\n \r\n         const [result] = await db.execute(\r\n             'INSERT INTO Categoria (nombre_categoria) VALUES (?)',\r\n-            [nombre_categoria.trim()]\r\n+            [nombreLimpio]\r\n         );\r\n \r\n         res.status(201).json({ \r\n             message: 'Categoría creada exitosamente', \r\n"
                },
                {
                    "date": 1743977241046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,11 @@\n                 message: 'El nombre de la categoría es demasiado largo. Máximo 40 caracteres.' \r\n             });\r\n         }\r\n \r\n+        // Limpiar y normalizar el texto\r\n+        const nombreLimpio = nombre_categoria.trim().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n+\r\n         // Verificar si la categoría existe\r\n         const [existing] = await db.execute(\r\n             'SELECT * FROM Categoria WHERE id_categoria = ?',\r\n             [req.params.id]\r\n@@ -118,18 +121,18 @@\n \r\n         // Verificar si ya existe otra categoría con el mismo nombre\r\n         const [duplicate] = await db.execute(\r\n             'SELECT * FROM Categoria WHERE nombre_categoria = ? AND id_categoria != ?',\r\n-            [nombre_categoria.trim(), req.params.id]\r\n+            [nombreLimpio, req.params.id]\r\n         );\r\n \r\n         if (duplicate.length > 0) {\r\n             return res.status(400).json({ message: 'Ya existe una categoría con ese nombre' });\r\n         }\r\n \r\n         await db.execute(\r\n             'UPDATE Categoria SET nombre_categoria = ? WHERE id_categoria = ?',\r\n-            [nombre_categoria.trim(), req.params.id]\r\n+            [nombreLimpio, req.params.id]\r\n         );\r\n \r\n         res.status(200).json({ \r\n             message: 'Categoría actualizada exitosamente',\r\n"
                }
            ],
            "date": 1743974315168,
            "name": "Commit-0",
            "content": "const db = require('../config/db.config');\r\n\r\n// Crear una nueva categoría\r\nexports.create = async (req, res) => {\r\n    try {\r\n        const { nombre_categoria } = req.body;\r\n        \r\n        // Validar que el nombre no esté vacío\r\n        if (!nombre_categoria || nombre_categoria.trim() === '') {\r\n            return res.status(400).json({ message: 'El nombre de la categoría es requerido' });\r\n        }\r\n\r\n        // Verificar si la categoría ya existe\r\n        const [existing] = await db.execute(\r\n            'SELECT * FROM Categoria WHERE nombre_categoria = ?',\r\n            [nombre_categoria]\r\n        );\r\n\r\n        if (existing.length > 0) {\r\n            return res.status(400).json({ message: 'Ya existe una categoría con ese nombre' });\r\n        }\r\n\r\n        const [result] = await db.execute(\r\n            'INSERT INTO Categoria (nombre_categoria) VALUES (?)',\r\n            [nombre_categoria]\r\n        );\r\n\r\n        res.status(201).json({ \r\n            message: 'Categoría creada exitosamente', \r\n            id: result.insertId,\r\n            categoria: {\r\n                id_categoria: result.insertId,\r\n                nombre_categoria\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Error al crear categoría:', error);\r\n        res.status(500).json({ \r\n            message: 'Error al crear categoría', \r\n            error: error.message,\r\n            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n        });\r\n    }\r\n};\r\n\r\n// Obtener todas las categorías\r\nexports.findAll = async (req, res) => {\r\n    try {\r\n        const [categorias] = await db.execute('SELECT * FROM Categoria ORDER BY nombre_categoria');\r\n        res.status(200).json(categorias);\r\n    } catch (error) {\r\n        console.error('Error al obtener categorías:', error);\r\n        res.status(500).json({ \r\n            message: 'Error al obtener categorías', \r\n            error: error.message \r\n        });\r\n    }\r\n};\r\n\r\n// Obtener una categoría por ID\r\nexports.findOne = async (req, res) => {\r\n    try {\r\n        const [categoria] = await db.execute(\r\n            'SELECT * FROM Categoria WHERE id_categoria = ?',\r\n            [req.params.id]\r\n        );\r\n\r\n        if (categoria.length === 0) {\r\n            return res.status(404).json({ message: 'Categoría no encontrada' });\r\n        }\r\n\r\n        res.status(200).json(categoria[0]);\r\n    } catch (error) {\r\n        console.error('Error al obtener categoría:', error);\r\n        res.status(500).json({ \r\n            message: 'Error al obtener categoría', \r\n            error: error.message \r\n        });\r\n    }\r\n};\r\n\r\n// Actualizar una categoría\r\nexports.update = async (req, res) => {\r\n    try {\r\n        const { nombre_categoria } = req.body;\r\n        \r\n        // Validar que el nombre no esté vacío\r\n        if (!nombre_categoria || nombre_categoria.trim() === '') {\r\n            return res.status(400).json({ message: 'El nombre de la categoría es requerido' });\r\n        }\r\n\r\n        // Verificar si la categoría existe\r\n        const [existing] = await db.execute(\r\n            'SELECT * FROM Categoria WHERE id_categoria = ?',\r\n            [req.params.id]\r\n        );\r\n\r\n        if (existing.length === 0) {\r\n            return res.status(404).json({ message: 'Categoría no encontrada' });\r\n        }\r\n\r\n        // Verificar si ya existe otra categoría con el mismo nombre\r\n        const [duplicate] = await db.execute(\r\n            'SELECT * FROM Categoria WHERE nombre_categoria = ? AND id_categoria != ?',\r\n            [nombre_categoria, req.params.id]\r\n        );\r\n\r\n        if (duplicate.length > 0) {\r\n            return res.status(400).json({ message: 'Ya existe una categoría con ese nombre' });\r\n        }\r\n\r\n        await db.execute(\r\n            'UPDATE Categoria SET nombre_categoria = ? WHERE id_categoria = ?',\r\n            [nombre_categoria, req.params.id]\r\n        );\r\n\r\n        res.status(200).json({ \r\n            message: 'Categoría actualizada exitosamente',\r\n            categoria: {\r\n                id_categoria: req.params.id,\r\n                nombre_categoria\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Error al actualizar categoría:', error);\r\n        res.status(500).json({ \r\n            message: 'Error al actualizar categoría', \r\n            error: error.message \r\n        });\r\n    }\r\n};\r\n\r\n// Eliminar una categoría\r\nexports.delete = async (req, res) => {\r\n    try {\r\n        // Verificar si la categoría existe\r\n        const [existing] = await db.execute(\r\n            'SELECT * FROM Categoria WHERE id_categoria = ?',\r\n            [req.params.id]\r\n        );\r\n\r\n        if (existing.length === 0) {\r\n            return res.status(404).json({ message: 'Categoría no encontrada' });\r\n        }\r\n\r\n        // Verificar si hay productos asociados a esta categoría\r\n        const [products] = await db.execute(\r\n            'SELECT COUNT(*) as count FROM Producto WHERE id_categoria = ?',\r\n            [req.params.id]\r\n        );\r\n\r\n        if (products[0].count > 0) {\r\n            return res.status(400).json({ \r\n                message: 'No se puede eliminar la categoría porque tiene productos asociados' \r\n            });\r\n        }\r\n\r\n        await db.execute(\r\n            'DELETE FROM Categoria WHERE id_categoria = ?',\r\n            [req.params.id]\r\n        );\r\n\r\n        res.status(200).json({ message: 'Categoría eliminada exitosamente' });\r\n    } catch (error) {\r\n        console.error('Error al eliminar categoría:', error);\r\n        res.status(500).json({ \r\n            message: 'Error al eliminar categoría', \r\n            error: error.message \r\n        });\r\n    }\r\n}; "
        }
    ]
}