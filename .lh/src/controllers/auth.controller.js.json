{
    "sourceFile": "src/controllers/auth.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1743972364435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743972616152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,15 @@\n         if (existingUser.length > 0) {\r\n             return res.status(400).json({ message: 'El email ya está registrado' });\r\n         }\r\n \r\n+        // Verificar si existe el rol de usuario (id_rol = 2)\r\n+        const [roles] = await db.execute('SELECT * FROM rol WHERE id_rol = 2');\r\n+        if (roles.length === 0) {\r\n+            // Si no existe el rol, lo creamos\r\n+            await db.execute('INSERT INTO rol (id_rol, nombre_rol) VALUES (2, \"Usuario\")');\r\n+        }\r\n+\r\n         // Hash de la contraseña\r\n         const hashedPassword = await bcrypt.hash(contrasena, 10);\r\n \r\n         // Asignar rol de usuario por defecto (2)\r\n@@ -38,10 +45,16 @@\n exports.login = async (req, res) => {\r\n     try {\r\n         const { email, contrasena } = req.body;\r\n \r\n-        // Buscar usuario\r\n-        const [users] = await db.execute('SELECT * FROM Usuarios WHERE email = ?', [email]);\r\n+        // Buscar usuario y su rol\r\n+        const [users] = await db.execute(`\r\n+            SELECT u.*, r.nombre_rol \r\n+            FROM Usuarios u \r\n+            JOIN rol r ON u.id_rol = r.id_rol \r\n+            WHERE u.email = ?\r\n+        `, [email]);\r\n+\r\n         if (users.length === 0) {\r\n             return res.status(404).json({ message: 'Usuario no encontrado' });\r\n         }\r\n \r\n@@ -54,9 +67,14 @@\n         }\r\n \r\n         // Generar token\r\n         const token = jwt.sign(\r\n-            { id: user.id_usuario, email: user.email, rol: user.id_rol },\r\n+            { \r\n+                id: user.id_usuario, \r\n+                email: user.email, \r\n+                rol: user.id_rol,\r\n+                rolNombre: user.nombre_rol \r\n+            },\r\n             process.env.JWT_SECRET || 'bikestore_secret_key_2024',\r\n             { expiresIn: '24h' }\r\n         );\r\n \r\n@@ -65,9 +83,10 @@\n             user: {\r\n                 id: user.id_usuario,\r\n                 nombre: user.nombre,\r\n                 email: user.email,\r\n-                rol: user.id_rol\r\n+                rol: user.id_rol,\r\n+                rolNombre: user.nombre_rol\r\n             }\r\n         });\r\n     } catch (error) {\r\n         console.error('Error en login:', error);\r\n"
                }
            ],
            "date": 1743972364435,
            "name": "Commit-0",
            "content": "const db = require('../config/db.config');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nexports.register = async (req, res) => {\r\n    try {\r\n        const { nombre, telefono, email, contrasena } = req.body;\r\n        \r\n        // Verificar si el email ya existe\r\n        const [existingUser] = await db.execute('SELECT * FROM Usuarios WHERE email = ?', [email]);\r\n        if (existingUser.length > 0) {\r\n            return res.status(400).json({ message: 'El email ya está registrado' });\r\n        }\r\n\r\n        // Hash de la contraseña\r\n        const hashedPassword = await bcrypt.hash(contrasena, 10);\r\n\r\n        // Asignar rol de usuario por defecto (2)\r\n        const id_rol = 2;\r\n\r\n        // Crear usuario\r\n        const [result] = await db.execute(\r\n            'INSERT INTO Usuarios (nombre, telefono, email, contrasena, id_rol) VALUES (?, ?, ?, ?, ?)',\r\n            [nombre, telefono, email, hashedPassword, id_rol]\r\n        );\r\n\r\n        res.status(201).json({ message: 'Usuario registrado exitosamente' });\r\n    } catch (error) {\r\n        console.error('Error en registro:', error);\r\n        res.status(500).json({ \r\n            message: 'Error al registrar usuario', \r\n            error: error.message,\r\n            details: error.stack \r\n        });\r\n    }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n    try {\r\n        const { email, contrasena } = req.body;\r\n\r\n        // Buscar usuario\r\n        const [users] = await db.execute('SELECT * FROM Usuarios WHERE email = ?', [email]);\r\n        if (users.length === 0) {\r\n            return res.status(404).json({ message: 'Usuario no encontrado' });\r\n        }\r\n\r\n        const user = users[0];\r\n\r\n        // Verificar contraseña\r\n        const validPassword = await bcrypt.compare(contrasena, user.contrasena);\r\n        if (!validPassword) {\r\n            return res.status(401).json({ message: 'Contraseña incorrecta' });\r\n        }\r\n\r\n        // Generar token\r\n        const token = jwt.sign(\r\n            { id: user.id_usuario, email: user.email, rol: user.id_rol },\r\n            process.env.JWT_SECRET || 'bikestore_secret_key_2024',\r\n            { expiresIn: '24h' }\r\n        );\r\n\r\n        res.status(200).json({\r\n            token,\r\n            user: {\r\n                id: user.id_usuario,\r\n                nombre: user.nombre,\r\n                email: user.email,\r\n                rol: user.id_rol\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Error en login:', error);\r\n        res.status(500).json({ \r\n            message: 'Error al iniciar sesión', \r\n            error: error.message,\r\n            details: error.stack \r\n        });\r\n    }\r\n}; "
        }
    ]
}