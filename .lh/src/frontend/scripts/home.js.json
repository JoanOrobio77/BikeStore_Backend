{
    "sourceFile": "src/frontend/scripts/home.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1743980457391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743982594663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,13 +188,34 @@\n     },\r\n     \r\n     // Inicializar la página\r\n     init() {\r\n+        console.log('Inicializando página de inicio...');\r\n+        \r\n         // Cargar productos y categorías al iniciar\r\n         this.loadProductos();\r\n         this.loadCategorias();\r\n         \r\n         // Event listeners para los enlaces de navegación\r\n+        const inicioLink = document.getElementById('inicioLink');\r\n+        const inicioFooterLink = document.getElementById('inicioFooterLink');\r\n+        \r\n+        if (inicioLink) {\r\n+            inicioLink.addEventListener('click', (e) => {\r\n+                e.preventDefault();\r\n+                console.log('Redirigiendo a inicio...');\r\n+                window.location.href = 'home.html';\r\n+            });\r\n+        }\r\n+        \r\n+        if (inicioFooterLink) {\r\n+            inicioFooterLink.addEventListener('click', (e) => {\r\n+                e.preventDefault();\r\n+                console.log('Redirigiendo a inicio desde footer...');\r\n+                window.location.href = 'home.html';\r\n+            });\r\n+        }\r\n+        \r\n         document.getElementById('categoriasLink').addEventListener('click', (e) => {\r\n             e.preventDefault();\r\n             document.querySelector('.categorias-filter').scrollIntoView({ behavior: 'smooth' });\r\n         });\r\n@@ -215,8 +236,5 @@\n         });\r\n     }\r\n };\r\n \r\n-// Inicializar la página cuando el DOM esté cargado\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    home.init();\r\n-}); \n\\ No newline at end of file\n+// No inicializamos aquí, dejamos que home.html lo haga \n\\ No newline at end of file\n"
                }
            ],
            "date": 1743980457391,
            "name": "Commit-0",
            "content": "// Objeto para manejar la página de inicio\r\nconst home = {\r\n    // Cargar todos los productos\r\n    async loadProductos(categoriaId = null) {\r\n        try {\r\n            const productosContainer = document.getElementById('productosContainer');\r\n            productosContainer.innerHTML = '<div class=\"loading\">Cargando productos...</div>';\r\n            \r\n            let url = `${API_URL}/productos`;\r\n            if (categoriaId) {\r\n                url += `?categoria=${categoriaId}`;\r\n            }\r\n            \r\n            const response = await fetch(url, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${auth.getToken()}`\r\n                }\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Error al cargar los productos');\r\n            }\r\n            \r\n            const productos = await response.json();\r\n            \r\n            if (productos.length === 0) {\r\n                productosContainer.innerHTML = '<div class=\"no-productos\">No hay productos disponibles.</div>';\r\n                return;\r\n            }\r\n            \r\n            this.renderProductos(productos);\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            document.getElementById('productosContainer').innerHTML = \r\n                `<div class=\"error\">Error al cargar los productos: ${error.message}</div>`;\r\n        }\r\n    },\r\n    \r\n    // Renderizar productos en la página\r\n    renderProductos(productos) {\r\n        const productosContainer = document.getElementById('productosContainer');\r\n        \r\n        productosContainer.innerHTML = productos.map(producto => `\r\n            <div class=\"producto-card\">\r\n                <img src=\"${producto.imagen ? `data:image/jpeg;base64,${producto.imagen}` : '../images/no-image.jpg'}\" \r\n                     alt=\"${producto.nombre_producto}\" \r\n                     class=\"producto-imagen\">\r\n                <div class=\"producto-info\">\r\n                    <h3 class=\"producto-nombre\">${producto.nombre_producto}</h3>\r\n                    <p class=\"producto-descripcion\">${producto.descripcion || 'Sin descripción'}</p>\r\n                    <div class=\"producto-categoria\">${producto.nombre_categoria || 'Sin categoría'}</div>\r\n                    <div class=\"producto-precio\">$${parseFloat(producto.precio).toFixed(2)}</div>\r\n                    <a href=\"#\" class=\"btn-ver-mas\" data-id=\"${producto.id_producto}\">Ver Detalles</a>\r\n                </div>\r\n            </div>\r\n        `).join('');\r\n        \r\n        // Agregar event listeners a los botones \"Ver Detalles\"\r\n        document.querySelectorAll('.btn-ver-mas').forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                const id = e.target.getAttribute('data-id');\r\n                this.showProductoDetalle(id);\r\n            });\r\n        });\r\n    },\r\n    \r\n    // Cargar categorías para el filtro\r\n    async loadCategorias() {\r\n        try {\r\n            const categoriasContainer = document.getElementById('categoriasFilter');\r\n            categoriasContainer.innerHTML = '<div class=\"loading\">Cargando categorías...</div>';\r\n            \r\n            const response = await fetch(`${API_URL}/categorias`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${auth.getToken()}`\r\n                }\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Error al cargar las categorías');\r\n            }\r\n            \r\n            const categorias = await response.json();\r\n            \r\n            if (categorias.length === 0) {\r\n                categoriasContainer.innerHTML = '<div class=\"no-categorias\">No hay categorías disponibles.</div>';\r\n                return;\r\n            }\r\n            \r\n            this.renderCategorias(categorias);\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            document.getElementById('categoriasFilter').innerHTML = \r\n                `<div class=\"error\">Error al cargar las categorías: ${error.message}</div>`;\r\n        }\r\n    },\r\n    \r\n    // Renderizar categorías en el filtro\r\n    renderCategorias(categorias) {\r\n        const categoriasContainer = document.getElementById('categoriasFilter');\r\n        \r\n        categoriasContainer.innerHTML = `\r\n            <button class=\"categoria-btn active\" data-id=\"\">Todas</button>\r\n            ${categorias.map(categoria => `\r\n                <button class=\"categoria-btn\" data-id=\"${categoria.id_categoria}\">${categoria.nombre_categoria}</button>\r\n            `).join('')}\r\n        `;\r\n        \r\n        // Agregar event listeners a los botones de categoría\r\n        document.querySelectorAll('.categoria-btn').forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                // Remover clase active de todos los botones\r\n                document.querySelectorAll('.categoria-btn').forEach(b => b.classList.remove('active'));\r\n                // Agregar clase active al botón clickeado\r\n                e.target.classList.add('active');\r\n                \r\n                const categoriaId = e.target.getAttribute('data-id');\r\n                this.loadProductos(categoriaId || null);\r\n            });\r\n        });\r\n    },\r\n    \r\n    // Mostrar detalles de un producto\r\n    async showProductoDetalle(id) {\r\n        try {\r\n            const response = await fetch(`${API_URL}/productos/${id}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${auth.getToken()}`\r\n                }\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Error al cargar los detalles del producto');\r\n            }\r\n            \r\n            const producto = await response.json();\r\n            \r\n            // Crear modal para mostrar detalles\r\n            const modal = document.createElement('div');\r\n            modal.className = 'modal show';\r\n            modal.innerHTML = `\r\n                <div class=\"modal-content producto-detalle\">\r\n                    <span class=\"close\">&times;</span>\r\n                    <div class=\"producto-detalle-content\">\r\n                        <div class=\"producto-detalle-imagen\">\r\n                            <img src=\"${producto.imagen ? `data:image/jpeg;base64,${producto.imagen}` : '../images/no-image.jpg'}\" \r\n                                 alt=\"${producto.nombre_producto}\">\r\n                        </div>\r\n                        <div class=\"producto-detalle-info\">\r\n                            <h2>${producto.nombre_producto}</h2>\r\n                            <div class=\"producto-detalle-categoria\">${producto.nombre_categoria || 'Sin categoría'}</div>\r\n                            <div class=\"producto-detalle-precio\">$${parseFloat(producto.precio).toFixed(2)}</div>\r\n                            <div class=\"producto-detalle-descripcion\">\r\n                                <h3>Descripción</h3>\r\n                                <p>${producto.descripcion || 'Sin descripción'}</p>\r\n                            </div>\r\n                            <button class=\"btn-comprar\">Agregar al Carrito</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            \r\n            document.body.appendChild(modal);\r\n            \r\n            // Cerrar modal al hacer clic en X\r\n            const closeBtn = modal.querySelector('.close');\r\n            closeBtn.addEventListener('click', () => {\r\n                document.body.removeChild(modal);\r\n            });\r\n            \r\n            // Cerrar modal al hacer clic fuera del contenido\r\n            modal.addEventListener('click', (e) => {\r\n                if (e.target === modal) {\r\n                    document.body.removeChild(modal);\r\n                }\r\n            });\r\n            \r\n            // Event listener para el botón de comprar\r\n            const btnComprar = modal.querySelector('.btn-comprar');\r\n            btnComprar.addEventListener('click', () => {\r\n                alert('Funcionalidad de carrito en desarrollo');\r\n            });\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            alert(`Error al cargar los detalles del producto: ${error.message}`);\r\n        }\r\n    },\r\n    \r\n    // Inicializar la página\r\n    init() {\r\n        // Cargar productos y categorías al iniciar\r\n        this.loadProductos();\r\n        this.loadCategorias();\r\n        \r\n        // Event listeners para los enlaces de navegación\r\n        document.getElementById('categoriasLink').addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            document.querySelector('.categorias-filter').scrollIntoView({ behavior: 'smooth' });\r\n        });\r\n        \r\n        document.getElementById('categoriasFooterLink').addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            document.querySelector('.categorias-filter').scrollIntoView({ behavior: 'smooth' });\r\n        });\r\n        \r\n        document.getElementById('contactoLink').addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            document.querySelector('footer').scrollIntoView({ behavior: 'smooth' });\r\n        });\r\n        \r\n        document.getElementById('contactoFooterLink').addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            document.querySelector('footer').scrollIntoView({ behavior: 'smooth' });\r\n        });\r\n    }\r\n};\r\n\r\n// Inicializar la página cuando el DOM esté cargado\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    home.init();\r\n}); "
        }
    ]
}